--- 
# TinyTapeout project information
project:
  wokwi_id:    374969806854695937        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Adrian Novosel"      # Your name
  title:        "State machine of an impulse counter"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "This design is not meant to be a standalone circuit. It is a state machine of my bachelor's thesis project which was also submitted to Tiny Tapeout. This submittal will be used for debugging and will give a better insight into the working principle of its source design. (https://github.com/DinkoOletic/tt04-wokwi_unizgfer_multich_pulse_counter_v01a)"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      By clocking the state machine adress pins a2, a1 and a0 change their values every 12 clocks. Shift/load pin is set to 1 and then back to zero every 12 clocks. Other outputs are used for debugging.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After an impulse on reset pin and a subsequent impulse on the ovf pin, you can start clocking the circuit. Adress pins marked with "a" should follow the sequence: "100"->"000"->"001"->"010"->"011"->"000". Shift/load pin wil be set to 1 after every adress change and then set back to 0 on the next clock. The sequence will repeat itself.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - reset
    - ovf  
    - clk
    - bi oe
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - counter flop1
    - counter flop2
    - counter flop3
    - counter flop4
    - zero
    - one
    - global reset
    - ovf
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - a2
    - a1
    - a0
    - shift/load
    - sm flop1
    - sm flop 2
    - sm flop 3
    - sm flop 4

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
