--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_USM_temp_sens_hyst.v
    - contador.v
    - data_sync.v
    - FSM_Controller.v
    - FSM_Hysteresis.v
    - FSM_SendData.v
    - mux.v
    - promedio.v
    - uart_basic.v
    - uart_baud_tick_gen.v
    - uart_rx.v
    - uart_tx.v
    - USM_ringoscillator.v
    - sky130_fd_sc_hd_blackbox.v
  top_module:  "tt_um_USM_temp_sens_hyst"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Francisco Aguirre, Francisca Donoso, based on design by Daniel Arevalos and Jorge Mar√≠n"
  title:        "RO-based temperature sensor with hysteresis"
  language:     "Verilog"
  description:  "Ring oscillator whose frequency depends on temperature, with a hysteresis module for temperature detection."

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This temperature sensor uses a ring oscillator connected to a counter to determine the number of cycles within a clock period.
      The numbers of cycles are averaged across 4 samples, using a simple 2-bit right shift, and then sent through UART as well as the
      standard I/O pins. As a ring oscillator's frequency is related to the temperature, we can then use this output to determine the
      temperature vs frequency characteristic.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset and enable are set, the ring oscillator should start. You can then use the UART rx channel to send the START code, 
      which will kick-start the data-sending module. This module will start outputting the average of the last 4 samples of the ring oscillator to the UART tx channel. 
      These samples are taken every clock cycle, which you can adjust by providing an external clock through the external clock pin,
      and then using the selector pin to switch to it.
      We suggest using a clock around 1MHz, as otherwise the counter may either be too fast or too slow.
      Additionally, you can send a REG code to adjust the registers used by the hysteresis module, allowing you
      to set the upper threshold, and then the lower threshold, through transmission from the tx channel.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - clk_internal
    - clk_sel
    - enable_inv_osc
    - enable_nand_osc
    - rx
    - osc_sel
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - tx
    - temp_warn
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - counter[0]
    - counter[1]
    - counter[2]
    - counter[3]
    - counter[4]
    - counter[5]
    - counter[6]
    - counter[7]
# The following fields are optional
  tag:          "oscillator, timer, sensor, experiment"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "mattvenn"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
