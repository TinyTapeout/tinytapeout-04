--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - neuron.v
    - adder_tree.v
    - decay_potential.v
    - full_adder.v
    - half_adder.v
    - mem_potential_acc.v
    - multiplier.v
    - multiplier_accumulator.v
    - multiplier_stage.v
    - nbit_adder.v
    - spike_generator.v
    - batch_normalization.v
    - top.v
  #   - neural_network.v
  #   - neuron_struct.v
  #   - layer.v
  #   - nn_system.v
  #   - sipo.v
  #   - reg_1b.v
  #   - reg_N.v
  top_module:  "tt_um_rejunity_telluride2023_neuron"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Paola Vitolo, Andrew Wabnitz, ReJ aka Renaldas Zioma"
  title:        "LIF Neuron, Telluride 2023"
  language:     "Verilog"
  description:  "Standalone test for a Binarized Leaky Integrate and Fire neuron that is part of the larger experimental design from Telluride Neuromorphic Workshop 2023"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Binarized Leaky Integrate and Fire (LIF) neuron supports binary [0/1] inputs and [-1/1] binarized weights.
      Inputs are multiplied by weights and accumulated on the internal membrane. Membrane is exponentially decaying with every clock cycle.
      Once membrane value (potential) reaches threshold, neuron spikes and membrane value is decreased.

          membrane += inputs * weights
          membrane *= decay_factor
          membrane -= threshold if membrane > threshold
          spike = 1 if membrane > threshold

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      While reset is held high, input values are assigned to weights
      After reset cycle neuron is active. The only output of the neuron is the binary spike!

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - input1 / weight1
    - input2 / weight2
    - input3 / weight3
    - input4 / weight4
    - input5 / weight5
    - input6 / weight6
    - input7 / weight7
    - input8 / weight8
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - spike
    - none
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "neuron, test"    # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""                # Describe any external hardware needed
  discord:      "rzioma"          # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""                # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000          # Clock frequency in Hz (if required)
  picture:      ""                # relative path to a picture in your repository
