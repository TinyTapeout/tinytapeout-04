--- 
# TinyTapeout project information
project:
  wokwi_id:    375042398768251905       # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Vicente Martinez, Cristobal Sanchez, Mauricio Pinto, Antar Derpich"      
  title:        "MINI ALU"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "This project is a Mini Alu with 4 bits, 2 bidirectionals used as inputs that indicates which operation is the Alu doing between XOR, OR, AND & addition"     
  
# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      A mini calculator with two bidirectionals that will change between which operations are being executed, then with the switches of the 4 bits A and the 
      4 Bits B they will define the values ​​that will pass through the mini calculator resulting in 4 bits and in the case of addition a Carry.
      The bidirectionals bits are defined by:
        (00:XOR)
        (01:OR)
        (10:AND)
        (11:+)

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      First of all, Use the bidirectionals to define all the operations, then try all the possible responses of each operation and see if they fit what it should be.
      

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - A0
    - A1
    - A2
    - A3  
    - B0
    - B1
    - B2
    - B3
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - O0
    - O1
    - O2
    - O3
    - Carry
    - none
    - none
    - none
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - S0
    - S1
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
