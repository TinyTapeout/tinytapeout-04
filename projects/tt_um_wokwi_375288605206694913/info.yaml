--- 
# TinyTapeout project information
project:
  wokwi_id:    375288605206694913        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Daniel Teal"      # Your name
  title:        "Adjustable Frequency LED Chaser"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Animates a seven-segment display given any clock"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This is a simple LED chaser animation for a seven-segment display, but a configurable bank of clock dividers allows the animation to run at human speeds (1-10Hz) for all input clock frequencies. The intent is to support a wide range of testing situations: as long as there's any clock and display whatsoever, you get a pretty demo.

      It can also be used as a frequency counter in a pinch.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      The chip clock input should be connected to any clock source of nonzero frequency. Examples include a manual tactile switch, a kHz clock source, or the maximum MHz source supported by the chip. The reset input is not used. Standard inputs 0--4 can be set high or low and are ideally adjustable, e.g., via a DIP switch array. These inputs may safely be toggled high and low while the chip is running. Inputs 5--7 are not used. Standard outputs 0--5 should be connected in order to the perimeter elements of a seven-segment display or equivalent. Outputs 6--7 are not connected internally (and so may be connected to a display anyway with no effect). The bidirectional IO is not used.

      By default, a new frame of the 6-frame LED chaser pattern is displayed on outputs 0 through 5 every rising clock edge. Inputs 0 through 4 toggle clock dividers of 2x ($2^1$), 4x ($2^2$), 16x ($2^4$), 256x ($2^8$), and 65536x ($2^{16}$) respectively. These dividers stack multiplicatively for a maximum clock division of $2^31$ = 2.15e9, which easily slows the maximum expected 50MHz clock to sub-Hertz frequencies.

      Combine a subset of the clock dividers for fine adjustment. For example, one might find the original clock signal makes the animation far too fast to see, applying the 65536x divider makes it too slow, and the combination of 256x and 16x dividers (for a total 4096x) works well. Clock division factors are intentionally chosen to be able to express any power of two.

      Finally, note the first six frames after chip startup may be partially incorrect due to noise. Later frames should be correct.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - enable 2x ($2^1$) divider
    - enable 4x ($2^2$) divider
    - enable 16x ($2^4$) divider
    - enable 256x ($2^8$) divider
    - enable 65536x ($2^{16}$) divider
    - n/c
    - n/c
    - n/c
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - n/c
    - n/c
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - n/c
    - n/c
    - n/c
    - n/c
    - n/c
    - n/c
    - n/c
    - n/c

# The following fields are optional
  tag:          "animation"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     "any"       # Clock frequency in Hz (if required)
  picture:      "media/diagram.png"      # relative path to a picture in your repository (must be 512kb or less)
