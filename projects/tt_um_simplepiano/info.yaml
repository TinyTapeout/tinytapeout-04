--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - led_bar.v
    - note_lut.v       
    - rtttl_sequencer.v
    - tone_gen.v
    - tt_um_simplepiano.v
  top_module:  "tt_um_simplepiano"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 

  author:       "Sarthak Raheja and Bittu N"      # Your name
  title:        "Simple Piano"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  
  # Short description of what your project does
  description:  | 
    The input clock is divided into a series of frequencies to mimic a piano having only 12 keys of one octave. User can choose from a choice of 3-5 octaves. Additionally, few pre-defined tunes have been included using RTTTL logic\n      

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    Description:  Twelve Independent Tonal Frequencies and Two Pre-defined set of frequencies/Songs\n
    Introduction: Application-Specific Integrated Circuits (ASICs) are custom-designed integrated circuits tailored to perform specific tasks efficiently. In this ASIC, we will generate twelve independent tonal frequencies and two predefined set of frequencies based on RTTTL.\n This ASIC features sixteen input switches for selecting twelve desired notes, a clock input, a reset mechanism and options for pre-defined tunes.\n
    Switch Inputs: The ASIC is equipped with sixteen - eighteen input switches, allowing users to select the desired outputs. These switches serve as a way to choose which tones or predefined frequency sentences are active.\n
    Input Multiplexing: The input switches control which of the 12 independent tonal frequencies/notes and 2-4 predefined frequency sentences should be active. The selected configuration is processed for further frequency generation.\n
    Tone Generation:\n
      Clock generation: To generate tonal frequencies/notes, the chip employs 1 independent clock. The PLL generates a specific clock frequency, which can be configured based on the input switch settings.\n
      Song Generator: The ASIC includes a frequency string generator on top of the  for the predefined sets. This generates sequences of frequencies based on two defined sentences. These sentences are stored in the chip's memory and can be selected via input switches.\n
    Output Channels:\n
      Twelve Independent Outputs: The ASIC has twelve distinct output channels, each corresponding to one of the twelve frequencies/notes.\n
      Two Predefined Sentence Outputs: Additionally, the chip has two outputs specifically dedicated to the predefined frequency sentences called songs. These outputs provide the configured sequences of frequencies as per user selection.\n
    Clock and Reset:\n
      Clock Input: The ASIC requires an external clock signal of 1Mhz to synchronize its operations. This clock signal ensures that all generated tones and sentences are coherent and correctly timed.\n
      Reset Mechanism: The chip features a reset input, allowing you to reset its internal state and restart the frequency generation process if needed.\n


# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  "Explain how to test your project"

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)