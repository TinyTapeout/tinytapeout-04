--- 
# TinyTapeout project information
project:
  wokwi_id:    375245713375900673        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Gabriel Marcio Vieira, Renan Rosa Ferreira, Francisco Eduardo Gonçalves, Dayane Cassuriaga"      # Your name
  title:        "Simulador de cruzamento de semáforo"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Simulator of a traffic light at a two-way intersection with a pedestrian crosswalk."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This circuit will use the chips internal clock and the PCBs low-level reset. The project in question belongs to the domain of traffic control systems and involves the implementation of a simulation of a traffic light using logical gate circuits. The simulation scenario takes place at an intersection composed of two main avenues, offering drivers the option to proceed straight or make a turn in their respective directions. In this context, four sets of traffic lights are present, but the control logic is applied to only two of them simultaneously. The system also incorporates a state dedicated to pedestrians, activated when all vehicle traffic lights display the red color, thus allowing safe pedestrian crossing. The overall operation of the system is based on logical combinations that determine each of the possible states

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Testing involves observing each traffic light state without punctuation: hardware setup, initial states, input signals, output monitoring, pedestrian activation, and the cycle of states.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - S1 Vermelho
    - S1 Amarelo
    - S1 Verde
    - S2 Vermelho
    - S2 Amarelo
    - S2 Verde
    - Pedestres (PD) Vermelho
    - Pedestres (PD) Verde
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1       # Clock frequency in Hz (if required)
  picture:      "diagrama.PNG"      # relative path to a picture in your repository (must be 512kb or less)
