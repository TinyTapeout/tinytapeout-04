--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # 0, because we're not using a Wokwi project.

  # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
  # Source files must be in ./src and you must list each source file separately.
  #NOTE: Most sources are from the raybox-zero git submodule, hence the longer paths:
  source_files:
    - top.v
    - raybox-zero/src/rtl/fixed_point_params.v
    - raybox-zero/src/rtl/helpers.v
    - raybox-zero/src/rtl/rbzero.v
    - raybox-zero/src/rtl/spi_registers.v
    - raybox-zero/src/rtl/debug_overlay.v
    - raybox-zero/src/rtl/map_overlay.v
    - raybox-zero/src/rtl/map_rom.v
    - raybox-zero/src/rtl/pov.v
    - raybox-zero/src/rtl/lzc.v
    - raybox-zero/src/rtl/reciprocal.v
    - raybox-zero/src/rtl/wall_tracer.v
    - raybox-zero/src/rtl/row_render.v
    - raybox-zero/src/rtl/vga_mux.v
    - raybox-zero/src/rtl/vga_sync.v
  top_module:  "tt_um_algofoogle_raybox_zero"      # Must start with "tt_um_".

  # How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "4x2"
  #NOTE: Version 0.3 of the design technically fits in 2x2 with ~88% utilisation,
  # but it is at risk of various violations, and I want to add more features anyway,
  # so 4x2 is a safer bet.

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "algofoogle (Anton Maurovic)"
  title:        "raybox-zero"
  language:     "Verilog"
  description:  "Simple VGA ray caster game demo"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This is a framebuffer-less VGA display generator (i.e. it is 'racing the beam') that produces a simple
      implementation of a "3D"-like ray casting game engine... just the graphics part of it.
      It is inspired by Wolfenstein 3D, using a map that is a grid of wall blocks, with basic texture mapping.
      
      There is nothing yet but textured walls, and flat-coloured floor and ceiling. No doors or sprites, sorry.
      Maybe that will come in version 2 (stay tuned for TT05!)

      The 'player' POV ("point of view") is controlled by SPI, which can be used to write the player position,
      facing X/Y vector, and viewplane X/Y vector in one go.

      This design uses 4x2 tiles in the TT04 130nm process. 4 tiles is about 0.16 square millimetres.

      NOTE: To optimise the design and make it work without a framebuffer, this renders what is effectively a
      portrait view, rotated. A portrait monitor (i.e. one rotated 90 degrees anti-clockwise) will display this
      like the conventional first-person shooter view, but it could still be used in a conventional landscape
      orientation if you imagine it is for a game where you have a first-person perspective of a flat 2D
      platformer, endless runner, "Descent-style" game, whatever.

      TBC.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      TBC: Explain how to test your project

      `debug` can be asserted to show current state of POV (point-of-view) registers, which might come in handy
      when trying to debug SPI writes.

      If `reg` input is asserted, VGA outputs are registered. Otherwise, they are just as they come out of internal combo logic.
      I've done it this way so I can test the difference (if any).

      `inc_px` and `inc_py` can be asserted to continuously increment their respective player X/Y position register.
      Normally the registers should be updated via SPI, but this allows someone to at least see a demo in action
      without having to implement the SPI host controller.

      The "SPI2" ports (`reg_sclk`, etc.) are for access to all other registers that we can play with.
      I decided to keep these separate because I implemented them very late, and didn't want to break the
      existing SPI interface for POV register access.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - 'SPI in: sclk'
    - 'SPI in: mosi'
    - 'SPI in: ss_n'
    - debug
    - inc_px
    - inc_py
    - reg
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - hsync_n
    - vsync_n
    - blue[0]
    - blue[1]
    - green[0]
    - green[1]
    - red[0]
    - red[1]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - o_hblank
    - o_vblank
    - 'SPI2 in: reg_sclk'
    - 'SPI2 in: reg_mosi'
    - 'SPI2 in: reg_ss_n'
    - none
    - none
    - none

# The following fields are optional
  tag:          "vga, demo, game, graphics, retro, 3d, spi"
  external_hw:  "VGA connector with RGB222 DAC"      # Describe any external hardware needed
  discord:      "algofoogle"
  doc_link:     "https://github.com/algofoogle/raybox-zero/blob/main/README.md"
  clock_hz:     25000000       # Clock frequency in Hz (if required). 25.175MHz is ideal, but 25.0MHz is fine.
  picture:      "doc/raybox-zero.png"
