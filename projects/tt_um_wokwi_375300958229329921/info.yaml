--- 
# TinyTapeout project information
project:
  wokwi_id:    375300958229329921        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Chris Burton"      # Your name
  title:        "Fastest Finger (Clocked)"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Shows which button was pressed first"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The 3-bit counter increments from the clock input, this then goes through a 3-8 decoder. If the output of the decoder is high and it's corresponding INx is high, OUTx is set high and the clock signal to the adder is interrupted.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Connect buttons up to IN0-IN7 and whichever one is pressed first will set the corresponding OUT0-OUT7 high.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - Button 0
    - Button 1
    - Button 2
    - Button 3
    - Button 4
    - Button 5
    - Button 6
    - Button 7
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - LED 0 / segment a
    - LED 1 / segment b
    - LED 2 / segment c
    - LED 3 / segment d
    - LED 4 / segment e
    - LED 5 / segment f
    - LED 6 / segment g
    - LED 7 / dot
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "game"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "burtyb"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
