--- 
# TinyTapeout project information 
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_darkfsegura_collatz.v
    - CC_ALU.v
    - CC_DECODER.v
    - CC_MUXX.v
    - SC_RegFIXED.v
    - SC_RegGENERAL.v
    - SC_RegSHIFTER.v
    - SC_STATEMACHINE.v
    - uDATAPATH.v
  top_module:  "tt_um_darkfsegura_collatz"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "CMUA F.Segura-Quijano, J.S.Moya"      # Your name
  title:        "uDATAPATH_Collatz"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "uDATAPATH_Collatz"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Our uDATAPATH_Collatz is a component that computes the Collatz Array Sequence for a given input number. The input and output are 8-bit vectors (data bus). The component is synchronous and has a reset signal to read the input data and perform the series calculation. The component implementation is based on a 4-register Datapath and ALU such that the implementation emulates basic assembler instructions programmed in a simple state machine. 

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      To test the component, you must put a data on the input bus BB_SYSTEM_data_InBUS[7:0], activate the Reset signal. In the output bus BB_SYSTEM_data_OutBUS[7:0] you can see the calculated string. * The series will be calculated close to the clock rate. Visually you will not be able to see the intermediate data unless you use a probe reading per digital channel from an oscilloscope.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - clk
    - rst_n
    - BB_SYSTEM_data_InBUS[0]
    - BB_SYSTEM_data_InBUS[1]
    - BB_SYSTEM_data_InBUS[2]
    - BB_SYSTEM_data_InBUS[3]
    - BB_SYSTEM_data_InBUS[4]
    - BB_SYSTEM_data_InBUS[5]
    - BB_SYSTEM_data_InBUS[6]
    - BB_SYSTEM_data_InBUS[7]
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - BB_SYSTEM_data_OutBUS[0]
    - BB_SYSTEM_data_OutBUS[1]
    - BB_SYSTEM_data_OutBUS[2]
    - BB_SYSTEM_data_OutBUS[3]
    - BB_SYSTEM_data_OutBUS[4]
    - BB_SYSTEM_data_OutBUS[5]
    - BB_SYSTEM_data_OutBUS[6]
    - BB_SYSTEM_data_OutBUS[7]

# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
