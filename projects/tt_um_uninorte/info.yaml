--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_uninorte.v
    
  
  top_module:  "tt_um_uninorte"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Eduardo Zurek, Margarita Narducci, Diana Rueda"
  title:        "Octal classifier"
  language:     "Verilog"
  description:  "Classifies images of numbers from 0 to 7 using the 16 most significant pixels"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The system classifies images of numbers from 0 to 7 using the 16 most significant pixels
      The systemÂ´s input or features are the 16 most significant pixels of an 8x8 image with a number from 0 to 7.
      The output is shown in the 7 segments display.
      
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      In order to emulate an image in the input, the features must be set to one or zero according to the number of the image
      Example of the image of a zero:
      feature_10=0  feature_13=1  feature_18=0  feature_19=1  feature_20=0  feature_21=0  feature_26=0  feature_27=1
      feature_28=0  feature_34=0  feature_36=0  feature_42=0  feature_43=1  feature_45=0  feature_60=0  feature_61=1

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - feature_10 = ui_in[0];
    - feature_13 = ui_in[1];
    - feature_18 = ui_in[2];
    - feature_19 = ui_in[3];
    - feature_20 = ui_in[4];
    - feature_21 = ui_in[5];
    - feature_26 = ui_in[6];
    - feature_27 = ui_in[7];
    
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot
    
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - feature_28 = uio_in[0];
    - feature_34 = uio_in[1];
    - feature_36 = uio_in[2];
    - feature_42 = uio_in[3];
    - feature_43 = uio_in[4];
    - feature_45 = uio_in[5];
    - feature_60 = uio_in[6];
    - feature_61 = uio_in[7];

# The following fields are optional
  tag:          "clf"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "N.A"      # Describe any external hardware needed
  discord:      "uninorte"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
