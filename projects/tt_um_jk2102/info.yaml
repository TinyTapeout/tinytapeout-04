--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_jk2102.v
    - clock_divider.v
    - pulse_generator.v
    - pulse_counter.v
    - i2c_slave.v
    - register_map.v
  top_module:  "tt_um_jk2102"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Jurica Kundrata"      # Your name
  title:        "Pulsed Plasma Thruster (PPT) Controller"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Controller module which generates triggering pulses for a Pulse Plasma Thruster, configurable via I2C interface."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The controller generates a given number of pulses at a given frequency and pulse width.
      The controller is to be used to control a Pulsed Plasma Thruster, i.e. its HV driver.
      The parameters of the controller can be given using the I2C slave interface.
      The I2C address is defined by 0b101 and the lower nibble of the input port.
      The I2C register map is:

      ADDR  |  XX   |     Description
      
      0x00               | RW  |     Clock divider value for the controller          
      
      0x01               | RW  |     Lower byte of pulse period 
      
      0x02               | RW  |     Higher byte of pulse period (6 LSBs used)
      
      0x03               | RW  |     Lower byte of pulse width 
      
      0x04               | RW  |     Higher byte of pulse width (6 LSBs used) 
      
      0x05               | RW  |     Total number of pulses 
      
      0x06               | --  |     N/A 
      
      0x07               | RW  |     Run command - initiate the pulse train 
      
      0x08               | RO  |     Number of pulses fired 
      
      0x09               | --  |     N/A 
      
      0x0A               | RO  |     Done signal - active when the pulse train is finished

      
      The controller can be run without configuration via I2C using the fifth bit of the input port (run_override signal).

      
      Verified by iverilog simulations and FPGA prototyped on Xilinx Basys 3 board. 

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Controller is designed to be used with a 32.768 kHz clock.
      It can be used without configuration via I2C interface by pulling HIGH the run_override signal (ui_in[4]).
      After reset the controller will produce a pulse train with 0.25 Hz frequency, 1/32s width and 16 pulses.
      The pulses are shown on the 7-seg display as alternating between dash '-' and zero '0'.
      Also it will produce a 1 Hz divided clock at div_clock port, i.e. dot port of the output port (7-seg display).

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - I2C address bit 0
    - I2C address bit 1
    - I2C address bit 2
    - I2C address bit 3
    - run_override
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - ON if pulse train HIGH
    - ON if pulse train HIGH
    - ON if pulse train HIGH
    - ON if pulse train HIGH
    - ON if pulse train HIGH
    - ON if pulse train HIGH
    - OFF if pulse train HIGH
    - div_clk
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - I2C SCL bus line
    - I2C SDA bus line
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "jk_2102"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     32768       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
