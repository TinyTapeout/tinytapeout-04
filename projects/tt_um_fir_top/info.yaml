--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - fir.v
    - shift_register.v
    - tt_um_fir_top.v
    - coeffs_regs.v
    - deco_7seg.v 
  top_module:  "tt_um_fir_top"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
# Before changing this, please reach out to us on discord to discuss your design.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Daniel Gonz√°lez"
  title:        "FIR Filter"
  language:     "Verilog"
  description:  "FIR Filter with 4 coefficients"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    Uses for coefficients which can be defined by the user with the swtichs, or by default 1s are used. The last 4 values of the input signal are multiplied by the coefficients and sum to generate the output value.
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
    You have to send the input signal x[n] with the uio_in, and the output uio_out will be the output signal y[n]
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - ui_in: Assign custom coefficients, ui_in[7:3] with sel [2:1] and enable [0]
    - uo_out: does nothing
    - ui_in: Input x[n]
    - uio_oe: does nothing
    - ena: enables the shift register for taking the inputs
    - clk: clock
    - rst_n: when 0 past values of x[n] are set to 0 and coefficients to 1s
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - uio_out: Output y[n]

# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - None
# The following fields are optional
  tag:          "digital filter"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "Requires a microcontroller to send the x[n] values for the input signal"      # Describe any external hardware needed
  discord:      ".dani1010"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/DanielG1010/verilog-template"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      "fir_filter.png"      # relative path to a picture in your repository
