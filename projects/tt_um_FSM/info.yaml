--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_FSM.v
  top_module:  "tt_um_FSM"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Lucas Irribarra, Felipe Rifo"
  title:        "Microrobotics FSM"
  language:     "Verilog"
  description:  "Simple FSM for Micro-srobots"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      A simple FSM controls the direction of a micro-robot based on sensors placed around the robot.
      The speed is driven by a PWM signal with an 8-bit resolution that can be set through input pins when the RESET pin is active.

      The design also supports the use of an H bridge to allow the motors bidirectional rotation.
     

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset, the PWM value should be setted by the input pins and the signal is on one of the output pins for testing.
      Experiment by changing the inputs to change the states of the FSM and the motor directions.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - none
    - none 
    - none
    - none
    - none
    - Front sensor
    - Left sensor
    - Rigt sensor
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - motor B left
    - motor B Right
    - motor A Left 
    - motor A Right
    - 0
    - 0
    - 0
    - pwm signal
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - pwm resolution bit 0
    - pwm resolution bit 1
    - pwm resolution bit 2
    - pwm resolution bit 3
    - pwm resolution bit 4
    - pwm resolution bit 5
    - pwm resolution bit 6
    - pwm resolution bit 7

# The following fields are optional
  tag:          "timer, test"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
