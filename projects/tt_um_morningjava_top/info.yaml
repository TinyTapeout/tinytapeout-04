--- 
# TinyTapeout project information
project:
  wokwi_id: 0
  source_files:
    - audio_pwm.v
    - frame.v
    - prescaler.v
    - square.v
    - triangle.v
    - uart.v
    - chiptune.v
    - tt_um_morningjava_top.v
  top_module: "tt_um_morningjava_top"

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "2x2"  # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:      "Wallace Everest"
  title:       "ChipTune"
  language:    "Verilog"
  description: "Vintage 8-bit sound generator"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    Chiptune implements an 8-bit Programmable Sound Generator.
    Input is from a serial UART interface.
    Output is PWM audio.

    ## The ChipTune Project
    This project is an audio device that replicates the square-wave sound generators of vintage video games.

    ### TinyTapeout 4 Configuration
    [[Top Level Drawing]](https://github.com/WallieEverest/tt03/tree/main/image/tt04.svg)

    Devices from the eFabless Multi-Project Wafer (MPW) shuttle are delivered in two package options, each with 64 pins.
    TinyTapeout 4 will be packaged in the QFN variant, mounted on a daughterboard for breakout.

    Based on data from:
    
    https://github.com/efabless/caravel_board/blob/main/hardware/breakout/caravel-M.2-card-QFN/caravel-M.2-card-QFN.pdf
    
    https://github.com/psychogenic/caravel-breakout-pcb/tree/main/breakout-qfn

    ### MPRJ_IO Pin Assignments
    | Signal      | Name                          | Dir | WCSP | QFN | PCB   |
    | ----------- | ----------------------------- |---- |----- |---- |------ |
    | mprj_io[0]  | JTAG                          | In  | D7   | 31  | J3.14 |
    | mprj_io[1]  | SDO                           | Out | E9   | 32  | J3.13 |
    | mprj_io[2]  | SDI                           | In  | F9   | 33  | J3.12 |
    | mprj_io[3]  | CSB                           | In  | E8   | 34  | J3.11 |
    | mprj_io[4]  | SCK                           | In  | F8   | 35  | J3.10 |
    | mprj_io[5]  | SER_RX                        | In  | E7   | 36  | J3.9  |
    | mprj_io[6]  | SER_TX                        | Out | F7   | 37  | J3.8  |
    | mprj_io[7]  | IRQ                           | In  | E5   | 41  | J3.7  |
    | mprj_io[8]  | DRIVER_SEL[0]                 | In  | F5   | 42  | J3.6  |
    | mprj_io[9]  | DRIVER_SEL[1]                 | In  | E4   | 43  | J3.5  |
    | mprj_io[10] | SLOW_CLK                      | Out | F4   | 44  | J3.4  |
    | mprj_io[11] | SET_CLK_DIV                   | In  | E3   | 45  | J3.3  |
    | mprj_io[12] | ACTIVE_SELECT[0]              | In  | F3   | 46  | J3.2  |
    | mprj_io[13] | ACTIVE_SELECT[1]              | In  | D3   | 48  | J3.1  |
    | mprj_io[14] | ACTIVE_SELECT[2]              | In  | E2   | 50  | J2.14 |
    | mprj_io[15] | ACTIVE_SELECT[3]              | In  | F1   | 51  | J2.13 |
    | mprj_io[16] | ACTIVE_SELECT[4]              | In  | E1   | 53  | J2.12 |
    | mprj_io[17] | ACTIVE_SELECT[5]              | In  | D2   | 54  | J2.11 |
    | mprj_io[18] | ACTIVE_SELECT[6]              | In  | D1   | 55  | J2.10 |
    | mprj_io[19] | ACTIVE_SELECT[7]              | In  | C10  | 57  | J2.9  |
    | mprj_io[20] | ACTIVE_SELECT[8]              | In  | C2   | 58  | J2.8  |
    | mprj_io[21] | IO_IN[0] / EXT_SCAN_CLK_OUT   | In  | B1   | 59  | J2.7  |
    | mprj_io[22] | IO_IN[1] / EXT_SCAN_DATA_OUT  | In  | B2   | 60  | J2.6  |
    | mprj_io[23] | IO_IN[2] / EXT_SCAN_SELECT    | In  | A1   | 61  | J2.5  |
    | mprj_io[24] | IO_IN[3] / EXT_SCAN_LATCH_EN  | In  | C3   | 62  | J2.4  |
    | mprj_io[25] | IO_IN[4]                      | In  | A3   |  2  | J2.3  |
    | mprj_io[26] | IO_IN[5]                      | In  | B4   |  3  | J2.2  |
    | mprj_io[27] | IO_IN[6]                      | In  | A4   |  4  | J2.1  |
    | mprj_io[28] | IO_IN[7]                      | In  | B5   |  5  | J1.14 |
    | mprj_io[29] | IO_OUT[0] / EXT_SCAN_DATA_IN  | Out | A5   |  6  | J1.13 |
    | mprj_io[30] | IO_OUT[1] / EXT_SCAN_DATA_IN  | Out | B6   |  7  | J1.12 |
    | mprj_io[31] | IO_OUT[2]                     | Out | A6   |  8  | J1.11 |
    | mprj_io[32] | IO_OUT[3]                     | Out | A7   | 11  | J1.10 |
    | mprj_io[33] | IO_OUT[4]                     | Out | C8   | 12  | J1.9  |
    | mprj_io[34] | IO_OUT[5]                     | Out | B8   | 13  | J1.4  |
    | mprj_io[35] | IO_OUT[6]                     | Out | A8   | 14  | J1.3  |
    | mprj_io[36] | IO_OUT[7]                     | Out | B9   | 15  | J1.2  |
    | mprj_io[37] | READY                         | Out | A9   | 16  | J1.1  |

    ### ChipTune Operation
    The audio portion of the project consists of two rectangular pulse generators.
    Each module is controlled by four 8-bit registers.
    Configurable parameters are the frequency, duty cycle, sweep, decay, and note duration.

    ### ChipTune Pin Assignments
    | Signal       | Name     | Signal       | Name     |
    | ------------ | ---------| ------------ | ---------|
    | clk          | 12 MHz   | ena          | SPARE    |
    | rst_n        | RESET_N  | uio_oe[7:0]  | SPARE    |
    | ui_in[0]     | SPARE    | uo_out[0]    | BLINK    |
    | ui_in[1]     | SPARE    | uo_out[1]    | LINK     |
    | ui_in[2]     | RX       | uo_out[2]    | TX       |
    | ui_in[3]     | SPARE    | uo_out[3]    | PWM      |
    | ui_in[4]     | SPARE    | uo_out[4]    | DAC[0]   |
    | ui_in[5]     | SPARE    | uo_out[5]    | DAC[1]   |
    | ui_in[6]     | SPARE    | uo_out[6]    | DAC[2]   |
    | ui_in[7]     | SPARE    | uo_out[7]    | DAC[3]   |
    | uio_in[7:0]  | SPARE    | uio_out[7:0] | SPARE    |

    ### Summary
    An external serial port can play music through this TT04 project.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test: |
    The ChipTune project can be interfaced to a computer COM port at 9600 baud.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - RX
    - none
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - PWM
    - BLINK LED
    - LINK LED
    - TX loopback
    - none
    - none
    - none
    - none
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:         "music"  # comma separated list
  external_hw: "Computer COM port"
  discord:     "morningjava"
  doc_link:    "https://github.com/WallieEverest/tt04/blob/main/README.md"
  clock_hz:    12000000  # Clock frequency in Hz
  picture:     "./image/tt04.svg"
