--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # 0, because we're not using a Wokwi project.

  # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
  # Source files must be in ./src and you must list each source file separately.
  #NOTE: Most sources are from the raybox-zero git submodule, hence the longer paths:
  source_files:
    - top.v
    - raybox-zero/src/rtl/fixed_point_params.v
    - raybox-zero/src/rtl/helpers.v
    - raybox-zero/src/rtl/rbzero.v
    - raybox-zero/src/rtl/spi_registers.v
    - raybox-zero/src/rtl/debug_overlay.v
    - raybox-zero/src/rtl/map_overlay.v
    - raybox-zero/src/rtl/map_rom.v
    - raybox-zero/src/rtl/pov.v
    - raybox-zero/src/rtl/lzc.v
    - raybox-zero/src/rtl/reciprocal.v
    - raybox-zero/src/rtl/wall_tracer.v
    - raybox-zero/src/rtl/row_render.v
    - raybox-zero/src/rtl/vga_mux.v
    - raybox-zero/src/rtl/vga_sync.v
  top_module:  "tt_um_algofoogle_raybox_zero"      # Must start with "tt_um_".

  # How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "4x2"
  #NOTE: Version 0.3 of the design technically fits in 2x2 with ~88% utilisation,
  # but it is at risk of various violations, and I want to add more features anyway,
  # so 4x2 is a safer bet.

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "algofoogle (Anton Maurovic)"
  title:        "raybox-zero"
  language:     "Verilog"
  description:  "Simple VGA ray caster game demo"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      NOTE: Expect updates after the TT04 datasheet is made.
      Check tt04-raybox-zero's README (https://github.com/algofoogle/tt04-raybox-zero)
      for latest info.

      This framebuffer-less VGA display generator is 'racing the beam' to yield a simple realtime
      "3D"-like render of a game map using ray casting. It's inspired by Wolf3D and based on
      Lode's Raycasting tutorial (https://lodev.org/cgtutor/raycasting.html). Think of it as
      a primitive 'GPU' using a grid map of wall blocks, with basic texture mapping
      and flat-coloured floor/ceiling. No doors or sprites -- but maybe in TT05?
      In TT04's 130nm process we use 4x2 tiles (~0.16mm&sup2;) at ~48% density.

      Without a framebuffer, rendering/animation occurs at full speed. Registers store the
      'POV' (Point of View) to render. It's expected that a host controller
      implements game/motion logic and calculates the POV, then sending it to the chip via SPI
      (`ss_n`/`sclk`/`mosi`). An MCU or low-spec CPU should do. I've been bit-banging
      SPI with a Raspberry Pi Pico.

      At reset the POV registers are set to an angled view of the inbuilt 16x16 grid map.

      NOTE: "FPS games" like Wolf3D use a landscape display, i.e. normal desktop monitor
      orientation. I designed this as a portrait display (rotated 90&deg; clockwise) for silicon
      area optimisations that come with rendering by scanline instead of by column. If you don't want
      a sideways monitor, design a game/demo using this different perspective.
      For example, image Mario's 1st-person view of his 2D platform world...

      ### Features

      *   640x480 VGA display at ~60Hz from 25MHz clock (25.175MHz ideal)
      *   Registered and unregistered digital VGA outputs: RGB222 and H/VSYNC
      *   Portrait "FPS" orientation
      *   Hard-coded 16x16 map with 3 textures: light- and dark-side variations
      *   SPI interface to set POV with debug option to see POV register bits
      *   'SPI2' interface to set ceiling colour, floor colour, or floor 'leak'
      *   Reset loads an interesting POV. Optional 'demo mode' inputs can vary it.
      *   HBLANK and VBLANK outputs as optional interrupt requests

      ### A warning about turning your screen on its side

      As stated, this is designed to drive a display with a *portrait* orientation when
      used as a "first person shooter" but BEWARE: The backlights failed on *two* old flat
      panel VGA displays (from circa 2003) not long after I turned them on their sides.
      Coincidence? Age? A CCFL failure mode? Not sure. I'm using a monitor from 2008 now.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Attach a VGA connector's HSYNC and VSYNC to the chip's respective outs with (say) inline 100R resistors
      for protection. Connect at least `red[1]`, `green[1]`, `blue[1]` with inline 270R resistors,
      or better yet use an R2R DAC on each colour output *pair*. Make sure VGA GND is connected, of course.

      Pull up `reg` to select 'registered outputs'. Without this, you will get the unregistered versions, which
      might be murky or have some timing issues -- I included this option for testing purposes.
      In the actual ASIC version of this, I expect the registered outputs will be much cleaner, but we'll see.

      Supply a 25MHz clock (or ideally 25.175MHz), and assert the `reset` signal, and you should get a
      clockwise-90&deg;-rotated display of textured walls with dark grey ceiling (right-hand side)
      and light grey floor (left-hand side).

      Pull up the `debug` input and you should see little squares show up in the corner of the screen that
      represent the current state of the POV registers.

      Pull up either/both of `inc_px/py` and the view should drift along slowly.
      This is 'demo mode'. Don't be alarmed when it goes through walls, or for periods when you see half the
      screen is just grey and the other half is flickering different colours -- this just means you're moving
      *through* a wall block.

      Changing POV: https://github.com/algofoogle/tt04-raybox-zero#write-pov-via-spi

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - 'SPI in: sclk'
    - 'SPI in: mosi'
    - 'SPI in: ss_n'
    - debug
    - inc_px
    - inc_py
    - reg
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - hsync_n
    - vsync_n
    - red[0]
    - red[1]
    - green[0]
    - green[1]
    - blue[0]
    - blue[1]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - 'Out: o_hblank'
    - 'Out: o_vblank'
    - 'SPI2 in: reg_sclk'
    - 'SPI2 in: reg_mosi'
    - 'SPI2 in: reg_ss_n'
    - none
    - none
    - none

# The following fields are optional
  tag:          "vga, demo, game, graphics, retro, 3d, spi"
  external_hw:  "VGA connector with RGB222 DAC"      # Describe any external hardware needed
  discord:      "algofoogle"
  doc_link:     "https://github.com/algofoogle/tt04-raybox-zero/blob/main/README.md"
  clock_hz:     25000000       # Clock frequency in Hz (if required). 25.175MHz is ideal, but 25.0MHz is fine.
  picture:      "doc/fpga-vs-sim-V2.jpg"
