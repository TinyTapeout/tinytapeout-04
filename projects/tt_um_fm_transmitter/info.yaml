--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - fm_modulator.v
    - i2s_rx.v
    - tt_um_fm_transmitter.v
    - cdc_slow2fast_bus.v
    - spi_config.v
  top_module:  "tt_um_fm_transmitter"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Jan Kral (<jan.kral@vut.cz>), Ondrej Kolar (<ondrej.kolar@vut.cz>)"               # Your name
  title:        "FM Transmitter"                       # Project title
  language:     "Verilog"                              # other examples include Verilog, Amaranth, VHDL, etc
  description:  "FM transmitter with I2S input"        # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    Our design takes an audio signal and modulates it to a higher carrier frequency, using [*FM modulation*](https://en.wikipedia.org/wiki/Frequency_modulation). The modulator in our design is based on a [*numerically controlled oscillator*](https://en.wikipedia.org/wiki/Numerically_controlled_oscillator) (NCO) with several modifications.
    
    The *frequency control word*, which increments the *phase accumulator*, is being added with the audio signal. This results in the phase increments proportional to the current audio sample level. The variation directly determines the actual shift of the output signal frequency. For the conversion of phase to a harmonic signal (sine wave) NCOs usually use look-up tables or [*CORDIC algorithm*](https://en.wikipedia.org/wiki/CORDIC). However, both of these methods are resource-heavy, therefore the design adopts a very rough, piecewise linearized approximation of the sine function. The main upside of this approach is the lightweight implementation, which utilizes only simple bit-shifting and addition operations.
    
    ![Our harmonic function approximation](doc/figureApproximation.pdf)
    
    Since the output digital-to-analog converter suggested below is not followed by a [*reconstruction filter*](https://en.wikipedia.org/wiki/Reconstruction_filter), the output signal will not be present only on a single frequency but also on several higher ones, sometimes called *mirrors* (as they appear on frequencies mirrored by the sampling frequency and its multiples). Thanks to this, it is possible to get the signal in the range of FM broadcast band, even with the sampling frequency lower than the carrier frequency.
    

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
    **Disclaimer! Our design is not intended for real *on air* use. Any signals generated by our design are far from ideal and require proper filtering. Improper use will most probably violate your local regulations. Use only at your own risk!**
    
    ![Schematic of a simple DAC](doc/schematicDAC.pdf)

    For testing the design you need to provide an audio source using the I2S bus interface. You can use for example Raspberry Pi. For the output, you need to build a DAC. A simple [*Râ€“2R resistor ladder network*](https://en.wikipedia.org/wiki/Resistor_ladder#R%E2%80%932R_resistor_ladder_network_(digital_to_analog_conversion)) should be enough for testing. The schematic is provided above.
   

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - i2s_clk
    - i2s_din
    - i2s_ws
    - i2s_ws_align_pin
    - audio_chan_sel_pin
    - multiply_sel_pin
    - dith_disable_pin
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - dac[0] (LSB)
    - dac[1]
    - dac[2]
    - dac[3] (MSB)
    - none
    - none
    - none
    - none
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - spi_clk (in)
    - spi_csn (in)
    - spi_mosi (in)
    - spi_miso (inout)

# The following fields are optional
  tag:          "fm, modulator, audio, music, i2s"              # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "4-bit R-2R DAC, I2S source, SPI (optional)"    # Describe any external hardware needed
  discord:      "xkolar74_10263"       # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/jankralx/tt04-fm-transmitter/blob/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     50000000               # Clock frequency in Hz (if required)
  picture:      "doc/diagram.pdf"      # relative path to a picture in your repository (must be 512kb or less)