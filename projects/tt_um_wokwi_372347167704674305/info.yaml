--- 
# TinyTapeout project information
project:
  wokwi_id:    372347167704674305        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Hugo Frisk"      # Your name
  title:        "SAR ADC Backend"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "A digital backend of a successive approximation digital to analog converter (SAR ADC) featuring two interfaces: I2C or an 11-bit parallel bus."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This is the digital backend of a charge redistrbution successive approximation analog to digital converter (SAR ADC).
      A SAR ADC converts an analog voltage to a digital value by successively recreating better and better
      approximations of the input analog signal. The analog frontend consists of a bank of capacitors where every 
      capacitor has half of the previous capacitors capacitance. Each capacitor can be connected to either the positive or 
      the negative supply, controlled by the digital backend. This forms a variable capacitive divider, or in simpler 
      terms, a digital to analog converter with very high output impedence. The voltage created by the divider is sent to 
      a comparator and compared with a reference voltage. In this implementation, the hold circuit that samples the analog 
      input is combined with the capacitor bank. 
      
      See this document from Texas Instruments that the design is based on: https://www.ti.com.cn/cn/lit/an/slyt176/slyt176.pdf 

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      The precision of the ADC can be set to either 11-bits or 6-bits (for faster measurements). When PRECSEL is low, the ADC is in 
      11-bit mode. When PRECSEL is high, the ADC is in 6-bit mode. S6 through S10 should be left floating when in 6-bit mode.

      In the picture of this design there is an example circuit of how the analog frontend could be built. Note that it is not 
      tested so use your own judgement and don't blow up your chip. 
  
      There are two ways to interface with the ADC:

        1. Through a 6- or 11-bit paralell bus:
          To make a measurement, pulse START/BUSY high. While the measurement is taking place the pin will remain high as to 
          signal that it is busy. When the pin goes low, the measurement is done. Store the measurement by reading S0 through 
          S10. S0 is MSB and S10 is LSB.  
      
        2. Through I2C:
          Connect SCL and SDA to a microcontroller with pullups. The I2C address of the ADC can be configured to 
          either 0x34 or 0x35. When ADRSEL is high, the address is 0x34 and when it is low it is 0x35. To make a measurement, 
          send a write command to configured address with the data 0x01. Read the measurement by requesting 2 bytes from 
          configured address. The ADC will NACK the request if it is still busy with the measurement. 

      Make sure RST_N is pulsed low after a power cycle. 
      
      The clock speed that this design works at is yet to be determined and is left as an exercise to the engineer. 


# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - CMPR
    - PRECSEL
    - ADRSEL
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - S0
    - S1
    - S2
    - S3
    - S4
    - S5
    - S6
    - S7
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - START/BUSY
    - SCL
    - SDA
    - S8
    - S9
    - S10
    - INCTRL
    - GNDCTRL

# The following fields are optional
  tag:          "experiment, utility"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "Op-amp, some precise capacitors, resistors, negative supply, and, p-channel and n-channel mosfets"      # Describe any external hardware needed
  discord:      "pepperonipingu"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     100000       # Clock frequency in Hz (if required)
  picture:      "analog_frontend_circuit.png"      # relative path to a picture in your repository (must be 512kb or less)
