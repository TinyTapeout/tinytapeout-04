--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_marno_factorize.v
    - seg7decoder.v
    - factorizer.v
  top_module:  "tt_um_marno_factorize" # Put the name of your top module here, must start with "tt_um_". Make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Marno van der Maas"
  title:        "Factorizer"
  language:     "Verilog"
  description:  "Takes the input and computes its factors"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Uses a set of registers to compute the modulo of all factors up to 19 in one or two steps.
      Shows factors 1-16 on the seven segment display.
      Shows only prime factors on the output pins.
      For the seven segment display, this design divides the clock, and then uses some combinational logic to convert from binary to hexadecimal for the display.

      Puts the bottom 8 bits of the counter on the bidirectional outputs if the input is 0.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset and input set to 0, the counter should increase by one every second with a 10MHz input clock from 0x1 to 0xF.

      For inputs other than 0, the seven segment display will show the factors one by one, cycling back at the end.
      It will also use the output pins to indicate the prime factors.

      Hexadecimals are displayed using the [decimal configurations (without modifications)](https://en.wikipedia.org/wiki/Seven-segment_display#Decimal).
      And then the hexidecimal values specified [here](https://en.wikipedia.org/wiki/Seven-segment_display#Hexadecimal).

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - Number to factor bit 0
    - Number to factor bit 1
    - Number to factor bit 2
    - Number to factor bit 3
    - Number to factor bit 4
    - Number to factor bit 5
    - Number to factor bit 6
    - Number to factor bit 7

# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot

# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - Is  2 a factor?
    - Is  3 a factor?
    - Is  5 a factor?
    - Is  7 a factor?
    - Is 11 a factor?
    - Is 13 a factor?
    - Is 17 a factor?
    - Is 19 a factor?

# The following fields are optional
  tag:          "timer, test"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
