--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - c_tt-um-ternaryPC-radixconvert_singlefile.v
  top_module:  "tt_um_ternaryPC_radixconvert"      # Put the name of your top module here, must start with "tt_um_". Make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
# Before changing this, please reach out to us on discord to discuss your design.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Steven bos"      # Your name
  title:        "4-trit balanced ternary program counter and convertor"      # Project title
  language:     "MRCS" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "A 4-trit synchronous balanced ternary (BT) program counter allowing tri-directional counting (up, down, hold) and jump/load the program counter. The other part is a 3-trit asyncronous BT radix converter."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This design tests various aspects of the MRCS verilog generator in combination with the new pin capabilities of TT. It tests both a sync and async design and uses all the available pins including the bidirectional io. The program counter is the ternary version of the binary one submitted for TT2. It is scalable, loadable (needed for both initialization and jump) and can count up,down and hold. 4-trit BT counters have a range of -40 to 40. The second design has two radix converters: BT to signed binary and immediately followed by a signed binary to BT converter. The output is thus a copy of the input if within range. The design is 4-bit signed binary as intermediate format and has a range of -8 to 7. BT input should thus not be higher or the output is wrong. The BT encoding is 2'b10 is logical 1, 2'b11 is logical 0, 2'b01 is logical -1 and 2'b00 is illegal.  

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      The repository has a FPGA folder where a verilog testbench is included with test input. The screenshot shown in the readme is expected as output (a pyramid counting up and down). The design is also tested on the Basys3 FPGA. The FPGA version is only minor different than the verilog file for the ASIC as the data direction (bi-dir) pins are not needed for the FPGA. Inputs {data2,data1,data0} are used for the radix convertor chain and inputs {data3,data2,data1,data0} for the program counter.

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - ui_in[7] data2 MST (most significant trit)
    - ui_in[6] data2 
    - ui_in[5] data1 MST
    - ui_in[4] data1
    - ui_in[3] data0 MST
    - ui_in[2] data0
    - ui_in[1] direction MST (1 is up, 0 is hold, -1 is down)
    - ui_in[0] direction    
# A description of what the outputs do
  outputs:
    - uo_out[7] PC data3 MST
    - uo_out[6] PC data3 
    - uo_out[5] PC data2 MST
    - uo_out[4] PC data2
    - uo_out[3] PC data1 MST
    - uo_out[2] PC data1
    - uo_out[1] PC data0 MST
    - uo_out[0] PC data0
# A description of what the bidirectional I/O pins do
  bidirectional:
    - uio_in[7]:  data3 MST
    - uio_in[6]:  data3 
    - uio_out[5]: RC data2 MST
    - uio_out[4]: RC data2 MST
    - uio_out[3]: RC data1 MST
    - uio_out[2]: RC data1 MST
    - uio_out[1]: RC data0 MST
    - uio_out[0]: RC data0 MST

# The following fields are optional
  tag:          "balanced ternary, program counter, radix convertor, experiment"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "steveb#6973"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/aiunderstand/tt04-balanced-ternary-counter-and-radix-convertor/tree/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      "overview.png"      # relative path to a picture in your repository
