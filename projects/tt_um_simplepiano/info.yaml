--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - led_bar.v
    - note_lut.v       
    - rtttl_sequencer.v
    - tone_gen.v
    - tt_um_simplepiano.v
  top_module:  "tt_um_simplepiano"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 

  author:       "Sarthak Raheja and Bittu N"      # Your name
  title:        "Simple Piano"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  
  # Short description of what your project does
  description: |
    An eight octave twelve key piano with two inbuilt songs. The design can be customized and incorporated as per user requirement in multiple use cases.

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    Description: Twelve Independent Tonal Frequencies and Two Pre-defined Songs

    Introduction: In this ASIC, we generate twelve independent tonal frequencies and two predefined songs based on RTTTL. This design features sixteen input switches for selecting one of two modes, one of eight octaves, any one of twelve notes. In the demo mode one out of two keys can be used to select the song.

    Tone Generation:
      Clock generation: The design makes use of a 1MHz clock to generate tonal frequencies/notes. A tone gen module generates a specific frequency, which is configured based on user input.
      Song demo mode: The design includes a note sequencer that steps through one of two predefined songs. The songs are stored as a list of note-duration pairs. The sequence is generated from an RTTTL description of the songs.

    Output Channels:
      The ASIC generates one single ended square wave output for the notes and the remaining outputs are used to drive an LED bar visualizer.

    Clock, Enable and Reset:
      Clock Input: The ASIC requires an external clock signal of 1MHz to synchronize its operations. This clock signal ensures that all generated tones and sentences are coherent and correctly timed. This allows us a frequency resolution of less than 0.5%.
      Enable: The design only produces output when the enable pin is held high.
      Reset Mechanism: The chip features a reset input, allowing you to reset its internal state and restart the frequency generation process if needed.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test: |
    The design requires a 1MHz clock. The design needs to be reset before using and enable must be set to 1 for output.
    To test the piano function, set the mode toggle to 0 and press any one of the twelve keys just as you would on a piano.
    To test the demo function, set the mode toggle to 1 and press either the C or C# keys for a short song.
    The audio output is single ended and must be fed to an amplifier.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
# These lists are from MSB down to LSB.
  inputs:               
    - Note E
    - Note F
    - Note F#
    - Note G
    - Note G#
    - Note A
    - Note A#
    - Note B
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - LED bar [6]
    - LED bar [5]
    - LED bar [4]
    - LED bar [3]
    - LED bar [2]
    - LED bar [1]
    - LED bar [0]
    - Audio out
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - Mode piano = 0 & demo = 1
    - Octave [3]
    - Octave [2]
    - Octave [1]
    - Note C
    - Note C#
    - Note D
    - Note D#

# The following fields are optional
  tag:          "rtttl, flintstones, takeonme, tunes, music, piano, sound, frequency generator, lut"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "12 momentary switches, 4 toggle switches, an led bar and a speaker"      # Describe any external hardware needed
  discord:      "diadatp & sarthakraheja_11266"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000000       # Clock frequency in Hz (if required)
  picture:      "docs/cover.jpg"      # relative path to a picture in your repository (must be 512kb or less)