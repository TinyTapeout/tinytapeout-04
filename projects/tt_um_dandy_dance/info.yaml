--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_dandy_dance.v
    - decoder.v
  top_module:  "tt_um_dandy_dance"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "2x2"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Blaise Saunders"
  title:        "Dandy VGA"
  language:     "Verilog"
  description:  "Serial vector graphics adapter"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This module is a serial vector graphics adapter [ or VGA for short ;^) ] it has a small set of state machine based primitive instructions
      that can be programmed over serial and animated etc. It does a nice job of drawing squares and I'm hoping 3D graphics can be achieved
      with use of the line primitive. There are 16 instruction registers that can be programmed and updated live over serial.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      The device outputs 8 bits on the bidirectional IO and 8 bits on the output pins, one is for X and the other is for Y display on a
      vector graphics display, most oscilloscopes with XY mode should work well. Can convert to analog with a simple R2R resistor ladder
      or whatever method you like best :). You can find some test code that can be flashed a Teensy or similar and hook it up to pin 1
      on the input to send some primitives to be drawn: https://github.com/DavidoRotho/tt04-davidroth-dandy-vga

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - UART RX input, 921600 baud input. Tested with Teensy 4.1
    - Safe/Unsafe mode toggle, unsafe high. Whether or not to wait while 
    - binary graphics clock divider for compensating for slow DAC drive speed [2:7] 
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - binary X axis output [7:0]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - binary Y axis output [7:0]

# The following fields are optional
  tag:          "graphics, experiment, animation, serial, uart"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "2 DACs, vector graphics display, fastish UART input"      # Describe any external hardware needed
  discord:      ".daveyr"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/DavidoRotho/tt04-davidroth-dandy-vga"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      "thumb.jpeg"      # relative path to a picture in your repository
